name: Build and Release

on:
  push:
    branches: [ main ]
    tags: []

jobs:
  release:
    runs-on: ubuntu-latest
    if: ${{ !contains(github.event.head_commit.message, '[skip ci]') }}
    permissions:
      contents: write
      packages: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.22'

    - name: Run unit tests
      run: go test -v ./pkg/migrator -run "TestMigrationOptions|TestOperation|TestMigration|TestAppliedMigration|TestGetFileSHA256|TestGetSlice"

    - name: Run integration tests
      env:
        INTEGRATION_TEST: "true"
      run: go test -v ./pkg/migrator -run "TestIntegration|TestOperationsIntegration"
      timeout-minutes: 10

    - name: Build
      run: go build -v ./...

    - name: Determine version
      id: version
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "Latest tag: $LATEST_TAG"
        
        # Extract version numbers
        MAJOR=$(echo $LATEST_TAG | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)/\1/')
        MINOR=$(echo $LATEST_TAG | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)/\2/')
        PATCH=$(echo $LATEST_TAG | sed 's/v\([0-9]*\)\.\([0-9]*\)\.\([0-9]*\)/\3/')
        
        # Increment patch version
        NEW_PATCH=$((PATCH + 1))
        NEW_VERSION="v${MAJOR}.${MINOR}.${NEW_PATCH}"
        
        echo "New version: $NEW_VERSION"
        echo "version=$NEW_VERSION" >> $GITHUB_OUTPUT

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build binaries
      run: |
        # Create dist directory
        mkdir -p dist
        
        # Build for multiple platforms
        GOOS=linux GOARCH=amd64 go build -o dist/arangodb-migrator-linux-amd64 ./cmd/migrator
        GOOS=linux GOARCH=arm64 go build -o dist/arangodb-migrator-linux-arm64 ./cmd/migrator
        GOOS=darwin GOARCH=amd64 go build -o dist/arangodb-migrator-darwin-amd64 ./cmd/migrator
        GOOS=darwin GOARCH=arm64 go build -o dist/arangodb-migrator-darwin-arm64 ./cmd/migrator
        GOOS=windows GOARCH=amd64 go build -o dist/arangodb-migrator-windows-amd64.exe ./cmd/migrator
        
        # Create checksums
        cd dist
        sha256sum arangodb-migrator-* > checksums.txt
        
        # List built binaries
        ls -la

    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: |
          framnk/go-arangodb-migrator:latest
          framnk/go-arangodb-migrator:${{ steps.version.outputs.version }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Generate changelog
      id: changelog
      env:
        GH_TOKEN: ${{ github.token }}
      run: |
        # Get the latest tag
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        echo "Latest tag: $LATEST_TAG"
        
        # Get commits since last tag (or all commits if no previous tag)
        if [ -z "$LATEST_TAG" ]; then
          COMMITS=$(git log --oneline --no-merges)
          CHANGELOG="## Initial Release\n\n### Commits:\n"
        else
          COMMITS=$(git log --oneline --no-merges $LATEST_TAG..HEAD)
          if [ -z "$COMMITS" ]; then
            CHANGELOG="## Changes since last release:\n- No new commits found"
          else
            CHANGELOG="## Changes since last release:\n\n### Commits:\n"
          fi
        fi
        
        # Add commits to changelog if there are any
        if [ ! -z "$COMMITS" ]; then
          while IFS= read -r commit; do
            if [ ! -z "$commit" ]; then
              CHANGELOG="$CHANGELOG\n- $commit"
            fi
          done <<< "$COMMITS"
        fi
        
        # Try to get PR information using GitHub CLI if available
        if command -v gh &> /dev/null; then
          PRS=$(gh pr list --state merged --base main --limit 10 --json number,title,url,mergedAt)
          if [ ! -z "$PRS" ] && [ "$PRS" != "[]" ]; then
            CHANGELOG="$CHANGELOG\n\n### Merged Pull Requests:\n"
            echo "$PRS" | jq -r '.[] | "- #\(.number) \(.title) (\(.url))"' >> /tmp/prs.txt
            if [ -f /tmp/prs.txt ]; then
              while IFS= read -r pr; do
                if [ ! -z "$pr" ]; then
                  CHANGELOG="$CHANGELOG\n$pr"
                fi
              done < /tmp/prs.txt
            fi
          fi
        fi
        
        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo -e "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create tag
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git tag ${{ steps.version.outputs.version }}
        git push origin ${{ steps.version.outputs.version }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.version.outputs.version }}
        release_name: Release ${{ steps.version.outputs.version }}
        body: |
          ## What's Changed
          
          This is an automated release created when changes were merged to main.
          
          ### Installation:
          
          Add this to your `go.mod` file:
          ```go
          require github.com/FramnkRulez/go-arangodb-migrator v${{ steps.version.outputs.version }}
          ```
          
          Or run:
          ```bash
          go get github.com/FramnkRulez/go-arangodb-migrator@v${{ steps.version.outputs.version }}
          ```
          
          ### Quick Start:
          ```go
          import "github.com/FramnkRulez/go-arangodb-migrator/pkg/migrator"
          
          err := migrator.MigrateArangoDatabase(ctx, db, migrator.MigrationOptions{
              MigrationFolder:     "./migrations",
              MigrationCollection: "migrations",
          })
          ```
          
          ### CLI Tool
          
          **Option 1: Docker (Recommended)**
          ```bash
          docker run --rm framnk/go-arangodb-migrator:${{ steps.version.outputs.version }} --help
          ```
          
          **Option 2: Download pre-built binaries**
          
          - [Linux (AMD64)](https://github.com/FramnkRulez/go-arangodb-migrator/releases/download/${{ steps.version.outputs.version }}/arangodb-migrator-linux-amd64)
          - [Linux (ARM64)](https://github.com/FramnkRulez/go-arangodb-migrator/releases/download/${{ steps.version.outputs.version }}/arangodb-migrator-linux-arm64)
          - [macOS (AMD64)](https://github.com/FramnkRulez/go-arangodb-migrator/releases/download/${{ steps.version.outputs.version }}/arangodb-migrator-darwin-amd64)
          - [macOS (ARM64)](https://github.com/FramnkRulez/go-arangodb-migrator/releases/download/${{ steps.version.outputs.version }}/arangodb-migrator-darwin-arm64)
          - [Windows (AMD64)](https://github.com/FramnkRulez/go-arangodb-migrator/releases/download/${{ steps.version.outputs.version }}/arangodb-migrator-windows-amd64.exe)
          
          **Option 3: Build from source**
          ```bash
          go install github.com/FramnkRulez/go-arangodb-migrator/cmd/migrator@v${{ steps.version.outputs.version }}
          ```
          
          ${{ steps.changelog.outputs.changelog }}
        draft: false
        prerelease: false

    - name: Upload Release Assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/arangodb-migrator-linux-amd64
        asset_name: arangodb-migrator-linux-amd64
        asset_content_type: application/octet-stream

    - name: Upload Release Assets - Linux ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/arangodb-migrator-linux-arm64
        asset_name: arangodb-migrator-linux-arm64
        asset_content_type: application/octet-stream

    - name: Upload Release Assets - macOS AMD64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/arangodb-migrator-darwin-amd64
        asset_name: arangodb-migrator-darwin-amd64
        asset_content_type: application/octet-stream

    - name: Upload Release Assets - macOS ARM64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/arangodb-migrator-darwin-arm64
        asset_name: arangodb-migrator-darwin-arm64
        asset_content_type: application/octet-stream

    - name: Upload Release Assets - Windows AMD64
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/arangodb-migrator-windows-amd64.exe
        asset_name: arangodb-migrator-windows-amd64.exe
        asset_content_type: application/octet-stream

    - name: Upload Release Assets - Checksums
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/checksums.txt
        asset_name: checksums.txt
        asset_content_type: text/plain 